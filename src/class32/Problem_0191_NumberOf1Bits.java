package class32;

/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * 提示：
 * 输入必须是长度为 32 的 二进制串 。
 * 进阶：
 * 如果多次调用这个函数，你将如何优化你的算法？
 * Leetcode题目 : https://leetcode.cn/problems/number-of-1-bits/
 */
public class Problem_0191_NumberOf1Bits {

    /**
     * n的二进制形式，有几个1？
     * -n = ~n + 1;
     */
    public static int hammingWeight1(int n) {
        int bits = 0;
        int rightOne = 0;
        while (n != 0) {
            bits++;
            rightOne = n & (-n);
            n ^= rightOne;
        }
        return bits;
    }

    /**
     * 只要n是32位，跑完这段代码就能求出来有多少个1
     *
     * @param n
     * @return
     */
    public static int hammingWeight2(int n) {
        // 0x55555555 => 01010101 01010101 01010101 01010101
        //  (n & 0x55555555) + ((n >>> 1) & 0x55555555) => 变成2位的1 一起算的状态
        n = (n & 0x55555555) + ((n >>> 1) & 0x55555555);
        // 0x33333333 => 00110011 00110011 00110011 00110011
        // (n & 0x33333333) + ((n >>> 2) & 0x33333333) => 变成4位的1 一起算的状态
        n = (n & 0x33333333) + ((n >>> 2) & 0x33333333);
        // 0x0f0f0f0f => 00001111 00001111 00001111 00001111
        n = (n & 0x0f0f0f0f) + ((n >>> 4) & 0x0f0f0f0f);
        // 0x00ff00ff => 00000000 11111111 00000000 11111111
        n = (n & 0x00ff00ff) + ((n >>> 8) & 0x00ff00ff);
        n = (n & 0x0000ffff) + ((n >>> 16) & 0x0000ffff);
        return n;
    }

}
